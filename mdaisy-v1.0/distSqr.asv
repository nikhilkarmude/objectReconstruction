function [DisIm] = distSqr(descs1, descs2,im1,im2)

% Find SIFT keypoints for each image
% [im1, des1, loc1] = sift(image1);
% [im2, des2, loc2] = sift(image2);

% For efficiency in Matlab, it is cheaper to compute dot products between
%  unit vectors rather than Euclidean distances.  Note that the ratio of 
%  angles (acos of dot products of unit vectors) is a close approximation
%  to the ratio of Euclidean distances for small angles.
%
% distRatio: Only keep matches in which the ratio of vector angles from the
%   nearest to second nearest neighbor is less than distRatio.
distRatio = 0.70;



[kk,pp,tt]=size(Im1);
DispIm=zeors(kk,pp);
for ii=1:kk,
    
    for jj=1:pp,
        
        des1=display_descriptor(descs1, y, x);
        des2=display_descriptor(descs2, y, x);
        
        % For each descriptor in the first image, select its match to second image.
        des2t = des2';                          % Precompute matrix transpose
        for i = 1 : size(des1,1)
           dotprods = des1(i,:) * des2t;        % Computes vector of dot products
           [vals,indx] = sort(acos(dotprods));  % Take inverse cosine and sort results

           % Check if nearest neighbor has angle less than distRatio times 2nd.
           if (vals(1) < distRatio * vals(2))
              match(i) = indx(1);
              z = distSqr(x,y)
              
              
           else
              match(i) = 0;
           end
        end
        
    end,
end,



%%%%%%%%%%%%%%
function z = distSqr(x,y)
% function z = distSqr(x,y)
%
% Return matrix of all-pairs squared distances between the vectors
% in the columns of x and y.
%
% INPUTS
% 	x 	dxn matrix of vectors
% 	y 	dxm matrix of vectors
%
% OUTPUTS
% 	z 	nxm matrix of squared distances
%
% This routine is faster when m<n than when m>n.
%
% David Martin <dmartin@eecs.berkeley.edu>
% March 2003

% Based on dist2.m code,
% Copyright (c) Christopher M Bishop, Ian T Nabney (1996, 1997)

if size(x,1)~=size(y,1), 
  error('size(x,1)~=size(y,1)'); 
end

[d,n] = size(x);
[d,m] = size(y);

% z = repmat(sum(x.^2)',1,m) ...
%     + repmat(sum(y.^2),n,1) ...
%     - 2*x'*y;

z = x'*y;
x2 = sum(x.^2)';
y2 = sum(y.^2);
for i = 1:m,
  z(:,i) = x2 + y2(i) - 2*z(:,i);
end









% % Create a new image showing the two images side by side.
% im3 = appendimages(im1,im2);
% 
% % Show a figure with lines joining the accepted matches.
% figure('Position', [100 100 size(im3,2) size(im3,1)]);
% colormap('gray');
% imagesc(im3);
% hold on;
% cols1 = size(im1,2);
% for i = 1: size(des1,1)
%   if (match(i) > 0)
% 	  
% 	 scale = ceil(6*loc1(i,3));
% 	 if scale < 40
% 		 %continue;
% 	 end
% 	  
%     line([loc1(i,2) loc2(match(i),2)+cols1], ...
%          [loc1(i,1) loc2(match(i),1)], 'Color', 'r');
% 	 
% 	 scale = ceil(6*loc1(i,3));
% 	 s = sin(loc1(i,4));
% 	 c = cos(loc1(i,4));
% 	 rectangle('Position', [loc1(i,2)-scale loc1(i,1)-scale 2*scale 2*scale], 'EdgeColor', 'c', 'Curvature', [1,1]);
% 	 y1 = 0;
% 	 x1 = 1;
% 	 r1 = loc1(i,1) - scale * (c * y1 + s * x1);
% 	 c1 = loc1(i,2) + scale * (- s * y1 + c * x1);
% 	 line([loc1(i,2) c1], [loc1(i,1) r1], 'Color', 'c', 'LineWidth', 2);
% 	 
% 	 scale = ceil(6*loc2(match(i),3));
% 	 s = sin(loc2(match(i),4));
% 	 c = cos(loc2(match(i),4));
% 	 y1 = 0;
% 	 x1 = 1;
% 	 r1 = loc2(match(i),1) - scale * (c * y1 + s * x1);
% 	 c1 = loc2(match(i),2) + scale * (- s * y1 + c * x1);
% 	 rectangle('Position', [loc2(match(i),2)+cols1-scale loc2(match(i),1)-scale 2*scale 2*scale], 'EdgeColor', 'c', 'Curvature', [1,1]);
% 	 line([loc2(match(i),2)+cols1 c1+cols1], [loc2(match(i),1) r1], 'Color', 'c', 'LineWidth', 2);
%   end
% end
% hold off;
num = sum(match > 0);

fprintf('Found %d matches.\n', num);